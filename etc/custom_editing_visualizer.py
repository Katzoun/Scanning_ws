import open3d as o3d
import numpy as np
from typing import List, Tuple
import copy


class CustomEditingVisualizer:
    """
    Vlastn√≠ implementace editing functionality s polygon selection
    """
    def __init__(self):
        self.vis = None
        self.mesh = None
        self.original_mesh = None
        self.polygon_points = []
        self.selection_mode = False
        self.selected_indices = set()
        self.crop_mode = 'inside'  # 'inside' nebo 'outside'
        self.view_axis = 'z'  # pro projection
        
    def create_window(self, window_name="Custom Editing Visualizer", width=1024, height=768):
        """Vytvo≈ô√≠ visualizer okno"""
        self.vis = o3d.visualization.VisualizerWithKeyCallback()
        self.vis.create_window(window_name=window_name, width=width, height=height)
        self.setup_callbacks()
        return True
        
    def setup_callbacks(self):
        """Nastaven√≠ key callbacks a mouse callbacks"""
        # Z√°kladn√≠ funkce
        self.vis.register_key_callback(ord("H"), self.show_help)
        self.vis.register_key_callback(ord("S"), self.save_mesh)
        self.vis.register_key_callback(ord("R"), self.reset_view)
        self.vis.register_key_callback(ord("U"), self.undo_changes)
        
        # Selection re≈æim
        self.vis.register_key_callback(ord("P"), self.toggle_polygon_mode)
        self.vis.register_key_callback(ord("C"), self.clear_selection)
        self.vis.register_key_callback(ord("V"), self.visualize_selection)
        
        # Crop operace
        self.vis.register_key_callback(ord("X"), self.crop_selection)
        self.vis.register_key_callback(ord("D"), self.delete_selection)
        self.vis.register_key_callback(ord("I"), self.invert_selection)
        self.vis.register_key_callback(ord("M"), self.toggle_crop_mode)
        
        # Pohledy
        self.vis.register_key_callback(ord("1"), self.set_xy_view)
        self.vis.register_key_callback(ord("2"), self.set_xz_view)
        self.vis.register_key_callback(ord("3"), self.set_yz_view)
        
        # Mouse callback pro polygon drawing
        self.vis.register_mouse_move_callback(self.mouse_move_callback)
        self.vis.register_mouse_scroll_callback(self.mouse_scroll_callback)
        
    def add_geometry(self, geometry):
        """P≈ôid√° geometrii"""
        self.mesh = copy.deepcopy(geometry)
        self.original_mesh = copy.deepcopy(geometry)
        
        if self.vis is not None:
            return self.vis.add_geometry(self.mesh)
        return False
    
    def run(self):
        """Spust√≠ visualizer"""
        if self.vis is not None:
            self.show_help(None)
            return self.vis.run()
        return False
        
    def destroy_window(self):
        """Zniƒç√≠ okno"""
        if self.vis is not None:
            return self.vis.destroy_window()
        return False
    
    def get_edited_geometry(self):
        """Vr√°t√≠ editovanou geometrii"""
        return [self.mesh] if self.mesh is not None else []
    
    # === POLYGON SELECTION IMPLEMENTACE ===
    
    def toggle_polygon_mode(self, vis):
        """Zapne/vypne polygon selection m√≥d"""
        self.selection_mode = not self.selection_mode
        if self.selection_mode:
            print("üî∫ POLYGON SELECTION AKTIVOV√ÅN")
            print("   Pou≈æijte Ctrl+Click pro kreslen√≠ polygonu")
            print("   Enter pro dokonƒçen√≠, Escape pro zru≈°en√≠")
            self.polygon_points = []
        else:
            print("‚úì Polygon selection vypnut")
            self.polygon_points = []
        return False
    
    def mouse_move_callback(self, vis, x, y):
        """Callback pro pohyb my≈°i"""
        # Implementace polygon drawing by byla velmi slo≈æit√°
        # M√≠sto toho pou≈æijeme keyboard-based approach
        return False
    
    def mouse_scroll_callback(self, vis, x, y):
        """Callback pro scroll"""
        return False
    
    def select_rectangular_region(self, vis):
        """V√Ωbƒõr rectangular oblasti - zjednodu≈°en√° verze polygon selection"""
        if self.mesh is None:
            return False
            
        print("üì¶ Rectangular selection - simulace polygon selection")
        
        # Z√≠sk√°me bounding box a vytvo≈ô√≠me selection podle pohledu
        bbox = self.mesh.get_axis_aligned_bounding_box()
        center = bbox.get_center()
        extent = bbox.get_extent()
        
        # Definujeme selection region podle view axis
        if self.view_axis == 'z':  # XY view
            # Vybereme st≈ôedn√≠ ƒç√°st v X,Y
            sel_extent_x = extent[0] * 0.6
            sel_extent_y = extent[1] * 0.6
            min_bound = center - np.array([sel_extent_x/2, sel_extent_y/2, extent[2]])
            max_bound = center + np.array([sel_extent_x/2, sel_extent_y/2, extent[2]])
            
        elif self.view_axis == 'y':  # XZ view
            sel_extent_x = extent[0] * 0.6
            sel_extent_z = extent[2] * 0.6
            min_bound = center - np.array([sel_extent_x/2, extent[1], sel_extent_z/2])
            max_bound = center + np.array([sel_extent_x/2, extent[1], sel_extent_z/2])
            
        elif self.view_axis == 'x':  # YZ view
            sel_extent_y = extent[1] * 0.6
            sel_extent_z = extent[2] * 0.6
            min_bound = center - np.array([extent[0], sel_extent_y/2, sel_extent_z/2])
            max_bound = center + np.array([extent[0], sel_extent_y/2, sel_extent_z/2])
        
        # Najdeme vertices v selection region
        vertices = np.asarray(self.mesh.vertices)
        
        # Check kter√© vertices jsou uvnit≈ô selection boxu
        inside_mask = np.all(vertices >= min_bound, axis=1) & np.all(vertices <= max_bound, axis=1)
        selected_indices = np.where(inside_mask)[0]
        
        self.selected_indices = set(selected_indices)
        print(f"‚úì Vybr√°no {len(self.selected_indices)} vertices")
        
        return True
    
    def clear_selection(self, vis):
        """Vyma≈æe selection"""
        self.selected_indices.clear()
        self.polygon_points = []
        print("‚úì Selection vymaz√°n")
        
        # Obnov√≠me p≈Øvodn√≠ barvy
        if self.mesh is not None:
            self.mesh.vertex_colors = o3d.utility.Vector3dVector()
            vis.update_geometry(self.mesh)
        return False
    
    def visualize_selection(self, vis):
        """Zv√Ωrazn√≠ vybranou oblast"""
        if not self.selected_indices:
            # Pokud nen√≠ nic vybr√°no, proveƒè rectangular selection
            self.select_rectangular_region(vis)
        
        if self.selected_indices and self.mesh is not None:
            # Obarv√≠me vybran√© vertices
            colors = np.zeros((len(self.mesh.vertices), 3))
            colors[:, 1] = 0.3  # Tmavƒõ zelen√° pro nevybran√©
            
            # ƒåerven√° pro vybran√©
            for idx in self.selected_indices:
                colors[idx] = [1.0, 0.0, 0.0]  # ƒåerven√°
                
            self.mesh.vertex_colors = o3d.utility.Vector3dVector(colors)
            vis.update_geometry(self.mesh)
            print(f"üé® Vizualizace: {len(self.selected_indices)} vybran√Ωch vertices")
        return False
    
    # === EDITING OPERACE ===
    
    def crop_selection(self, vis):
        """Crop podle selection"""
        if not self.selected_indices:
            print("‚ö†Ô∏è  ≈Ω√°dn√Ω selection - prov√°d√≠m rectangular selection")
            self.select_rectangular_region(vis)
        
        if not self.selected_indices:
            print("‚úó ≈Ω√°dn√© vertices k crop")
            return False
            
        if self.crop_mode == 'inside':
            # Ponech√°me pouze vybran√© vertices
            selected_list = list(self.selected_indices)
            cropped_mesh = self.mesh.select_by_index(selected_list)
            operation = "CROP UVNIT≈ò"
        else:
            # Ponech√°me v≈°echny kromƒõ vybran√Ωch
            all_indices = set(range(len(self.mesh.vertices)))
            outside_indices = list(all_indices - self.selected_indices)
            
            if not outside_indices:
                print("‚úó Crop by odstranil v≈°echny vertices")
                return False
                
            cropped_mesh = self.mesh.select_by_index(outside_indices)
            operation = "CROP MIMO"
        
        if len(cropped_mesh.vertices) > 0:
            self.mesh = cropped_mesh
            vis.clear_geometries()
            vis.add_geometry(self.mesh)
            self.selected_indices.clear()
            print(f"‚úì {operation}: {len(self.mesh.vertices)} vertices")
        else:
            print("‚úó Crop by vytvo≈ôil pr√°zdn√Ω mesh")
            
        return False
    
    def delete_selection(self, vis):
        """Sma≈æe vybranou oblast"""
        if not self.selected_indices:
            print("‚ö†Ô∏è  ≈Ω√°dn√Ω selection - prov√°d√≠m rectangular selection")
            self.select_rectangular_region(vis)
        
        if not self.selected_indices:
            print("‚úó ≈Ω√°dn√© vertices k smaz√°n√≠")
            return False
        
        # Odstranit vybran√© vertices = ponechat nevybran√©
        all_indices = set(range(len(self.mesh.vertices)))
        remaining_indices = list(all_indices - self.selected_indices)
        
        if not remaining_indices:
            print("‚úó Smaz√°n√≠ by odstranilo v≈°echny vertices")
            return False
        
        deleted_mesh = self.mesh.select_by_index(remaining_indices)
        
        if len(deleted_mesh.vertices) > 0:
            self.mesh = deleted_mesh
            vis.clear_geometries()
            vis.add_geometry(self.mesh)
            print(f"‚úì Smaz√°no {len(self.selected_indices)} vertices, z≈Øst√°v√° {len(self.mesh.vertices)}")
            self.selected_indices.clear()
        else:
            print("‚úó Smaz√°n√≠ by vytvo≈ôilo pr√°zdn√Ω mesh")
            
        return False
    
    def invert_selection(self, vis):
        """Invertuje selection"""
        if self.mesh is not None:
            all_indices = set(range(len(self.mesh.vertices)))
            self.selected_indices = all_indices - self.selected_indices
            print(f"üîÑ Selection invertov√°n: {len(self.selected_indices)} vertices")
            self.visualize_selection(vis)
        return False
    
    def toggle_crop_mode(self, vis):
        """P≈ôepne crop m√≥d"""
        self.crop_mode = 'outside' if self.crop_mode == 'inside' else 'inside'
        mode_text = "UVNIT≈ò selection" if self.crop_mode == 'inside' else "MIMO selection"
        print(f"‚úì Crop m√≥d: {mode_text}")
        return False
    
    # === VIEW CONTROLS ===
    
    def set_xy_view(self, vis):
        """Nastav√≠ XY pohled (Z osa)"""
        self.view_axis = 'z'
        ctr = vis.get_view_control()
        if self.mesh is not None:
            bbox = self.mesh.get_axis_aligned_bounding_box()
            center = bbox.get_center()
            ctr.set_front([0, 0, -1])
            ctr.set_up([0, 1, 0])
            ctr.set_lookat(center)
        print("‚úì XY pohled (Z projekce)")
        return False
    
    def set_xz_view(self, vis):
        """Nastav√≠ XZ pohled (Y osa)"""
        self.view_axis = 'y'
        ctr = vis.get_view_control()
        if self.mesh is not None:
            bbox = self.mesh.get_axis_aligned_bounding_box()
            center = bbox.get_center()
            ctr.set_front([0, 1, 0])
            ctr.set_up([0, 0, 1])
            ctr.set_lookat(center)
        print("‚úì XZ pohled (Y projekce)")
        return False
    
    def set_yz_view(self, vis):
        """Nastav√≠ YZ pohled (X osa)"""
        self.view_axis = 'x'
        ctr = vis.get_view_control()
        if self.mesh is not None:
            bbox = self.mesh.get_axis_aligned_bounding_box()
            center = bbox.get_center()
            ctr.set_front([1, 0, 0])
            ctr.set_up([0, 0, 1])
            ctr.set_lookat(center)
        print("‚úì YZ pohled (X projekce)")
        return False
    
    # === UTILITY FUNCTIONS ===
    
    def save_mesh(self, vis):
        """Ulo≈æ√≠ editovan√Ω mesh"""
        if self.mesh is not None:
            filename = "custom_edited_mesh.ply"
            o3d.io.write_triangle_mesh(filename, self.mesh)
            print(f"‚úì Mesh ulo≈æen jako '{filename}'")
        return False
    
    def reset_view(self, vis):
        """Reset pohledu"""
        vis.reset_view_point(True)
        print("‚úì Pohled resetov√°n")
        return False
    
    def undo_changes(self, vis):
        """Vr√°t√≠ p≈Øvodn√≠ mesh"""
        if self.original_mesh is not None:
            self.mesh = copy.deepcopy(self.original_mesh)
            vis.clear_geometries()
            vis.add_geometry(self.mesh)
            self.selected_indices.clear()
            print("‚Ü∂ Zmƒõny vr√°ceny - obnoven√Ω p≈Øvodn√≠ mesh")
        return False
    
    def show_help(self, vis):
        """Zobraz√≠ n√°povƒõdu"""
        print("\n" + "="*70)
        print("   CUSTOM EDITING VISUALIZER - N√ÅPOVƒöDA")
        print("="*70)
        print("SELECTION:")
        print("  P - Zapnout/vypnout polygon m√≥d")
        print("  V - Visualizovat/vytvo≈ôit rectangular selection")
        print("  C - Vymazat selection")
        print("  I - Invertovat selection")
        print()
        print("EDITING OPERACE:")
        print("  X - Crop podle selection")
        print("  D - Smazat vybranou oblast (Del)")
        print("  M - P≈ôepnout crop m√≥d (uvnit≈ô/mimo)")
        print(f"      Aktu√°ln√≠: {'UVNIT≈ò' if self.crop_mode == 'inside' else 'MIMO'}")
        print()
        print("POHLEDY (pro selection):")
        print("  1 - XY pohled (Z projekce)")
        print("  2 - XZ pohled (Y projekce)")  
        print("  3 - YZ pohled (X projekce)")
        print(f"      Aktu√°ln√≠: {self.view_axis.upper()} projekce")
        print()
        print("Z√ÅKLADN√ç:")
        print("  H - Tato n√°povƒõda")
        print("  S - Ulo≈æit mesh")
        print("  R - Reset pohledu")
        print("  U - Undo (vr√°tit p≈Øvodn√≠)")
        print()
        print("WORKFLOW:")
        print("  1. Nastavte pohled (1/2/3)")
        print("  2. Vytvo≈ôte selection (V)")
        print("  3. Nastavte crop m√≥d (M)")
        print("  4. Proveƒète operaci (X/D)")
        print()
        print("  ESC - Ukonƒçit")
        print("="*70)
        return False


def custom_draw_geometries_with_editing(geometries, window_name="Custom Editing", width=1024, height=768):
    """
    Vlastn√≠ implementace draw_geometries_with_editing()
    
    Args:
        geometries: List geometri√≠ k editaci
        window_name: N√°zev okna
        width, height: Rozmƒõry okna
        
    Returns:
        List editovan√Ωch geometri√≠ nebo None pokud byla editace zru≈°ena
    """
    
    if not geometries:
        print("‚úó ≈Ω√°dn√© geometrie k editaci")
        return None
    
    # Vytvo≈ô√≠me custom editor
    editor = CustomEditingVisualizer()
    
    try:
        # Nastav√≠me okno a p≈ôid√°me geometrie
        editor.create_window(window_name=window_name, width=width, height=height)
        
        for geom in geometries:
            editor.add_geometry(geom)
            break  # Pro jednoduchost podporujeme pouze jednu geometrii
        
        # Spust√≠me editor
        print(f"üöÄ Spou≈°t√≠m Custom Editing Interface...")
        print(f"   Geometrie: {len(geometries)} objekt≈Ø")
        print(f"   Stisknƒõte H pro n√°povƒõdu")
        
        editor.run()
        
        # Z√≠sk√°me editovan√© geometrie
        edited_geometries = editor.get_edited_geometry()
        
        # Zniƒç√≠me okno
        editor.destroy_window()
        
        if edited_geometries:
            print(f"‚úì Editace dokonƒçena: {len(edited_geometries)} objekt≈Ø")
            return edited_geometries
        else:
            print("‚úó ≈Ω√°dn√© geometrie po editaci")
            return None
            
    except Exception as e:
        print(f"‚úó Chyba bƒõhem editace: {e}")
        return None


# === DEMO FUNKCE ===

def demo_custom_editing():
    """
    Demonstrace vlastn√≠ editing functionality
    """
    
    # Naƒçten√≠ meshe
    mesh_path = "frames/marching_mesh.ply"
    try:
        mesh = o3d.io.read_triangle_mesh(mesh_path)
        print(f"‚úì Mesh naƒçten: {len(mesh.vertices)} vertices, {len(mesh.triangles)} triangles")
    except Exception as e:
        print(f"‚úó Chyba p≈ôi naƒç√≠t√°n√≠ meshe: {e}")
        return
    
    # Kontrola a v√Ωpoƒçet norm√°l
    if not mesh.has_vertex_normals():
        print("  Poƒç√≠t√°m vertex norm√°ly...")
        mesh.compute_vertex_normals()
    
    print("\n" + "="*60)
    print("   CUSTOM EDITING FUNCTIONALITY DEMO")
    print("="*60)
    print("Toto je vlastn√≠ implementace editing functionality")
    print("kter√° nahrazuje draw_geometries_with_editing().")
    print()
    print("HLAVN√ç FUNKCE:")
    print("‚Ä¢ Rectangular selection (m√≠sto polygon)")
    print("‚Ä¢ Crop uvnit≈ô/mimo selection")
    print("‚Ä¢ Delete selection")
    print("‚Ä¢ Invert selection")
    print("‚Ä¢ Undo funkcionalita")
    print("‚Ä¢ Fixace pohledu do os")
    print("="*60)
    
    input("Stisknƒõte Enter pro spu≈°tƒõn√≠ custom editoru...")
    
    # Pou≈æit√≠ vlastn√≠ editing functionality
    print("üöÄ Spou≈°t√≠m Custom Editing Interface...")
    
    # Nahrazen√≠ p≈Øvodn√≠ho k√≥du:
    # edited_geometry = o3d.visualization.draw_geometries_with_editing([mesh])
    edited_geometry = custom_draw_geometries_with_editing([mesh])
    
    if edited_geometry:
        edited_mesh = edited_geometry[0]
        print(f"‚úì Editace dokonƒçena: {len(edited_mesh.vertices)} vertices")
        
        # Ulo≈æ√≠me editovan√Ω mesh
        o3d.io.write_triangle_mesh("custom_polygon_edited_mesh.ply", edited_mesh)
        print("‚úì Editovan√Ω mesh ulo≈æen jako 'custom_polygon_edited_mesh.ply'")
        
        # Zobraz√≠me v√Ωsledek
        print("\nüìä POROVN√ÅN√ç:")
        print(f"   P≈Øvodn√≠: {len(mesh.vertices)} vertices, {len(mesh.triangles)} triangles")
        print(f"   Editovan√Ω: {len(edited_mesh.vertices)} vertices, {len(edited_mesh.triangles)} triangles")
        
        # Nab√≠dneme zobrazen√≠ v√Ωsledku
        response = input("\nChcete zobrazit editovan√Ω mesh? (y/n): ")
        if response.lower() == 'y':
            o3d.visualization.draw_geometries([edited_mesh], 
                                            window_name="Custom Editovan√Ω mesh",
                                            width=800, height=600)
    else:
        print("‚úó Editace byla zru≈°ena nebo neprobƒõhla")


if __name__ == '__main__':
    demo_custom_editing()
