import open3d as o3d
import numpy as np


def demo_real_polygon_selection():
    """
    Demonstrace skuteƒçn√© polygon selection v Open3D
    """
    
    # Naƒçten√≠ meshe
    mesh_path = "frames/marching_mesh.ply"
    try:
        mesh = o3d.io.read_triangle_mesh(mesh_path)
        print(f"‚úì Mesh naƒçten: {len(mesh.vertices)} vertices, {len(mesh.triangles)} triangles")
    except Exception as e:
        print(f"‚úó Chyba p≈ôi naƒç√≠t√°n√≠ meshe: {e}")
        return
    
    # Kontrola a v√Ωpoƒçet norm√°l
    if not mesh.has_vertex_normals():
        print("  Poƒç√≠t√°m vertex norm√°ly...")
        mesh.compute_vertex_normals()
    
    print("\n" + "="*60)
    print("   REAL POLYGON SELECTION DEMO")
    print("="*60)
    print("Tento demo uk√°≈æe skuteƒçnou polygon selection v Open3D")
    print("pou≈æit√≠m draw_geometries_with_editing().")
    print()
    print("INSTRUKCE:")
    print("1. Otev≈ôe se okno s meshem")
    print("2. Nastavte si vhodn√Ω pohled")
    print("3. Dr≈æte Shift + lev√© tlaƒç√≠tko my≈°i pro kreslen√≠ polygonu")
    print("4. Dokonƒçete polygon dvojklikem")
    print("5. Stisknƒõte Del pro smaz√°n√≠ vybran√Ωch ƒç√°st√≠")
    print("6. Nebo C pro crop (ponech√°n√≠ pouze vybran√Ωch ƒç√°st√≠)")
    print("7. Stisknƒõte Q nebo ESC pro ukonƒçen√≠")
    print("="*60)
    
    input("Stisknƒõte Enter pro pokraƒçov√°n√≠...")
    
    # Pou≈æit√≠ vlastn√≠ editing functionality m√≠sto vestavƒõn√©
    print("üöÄ Spou≈°t√≠m Custom Editing Interface...")
    
    # Import vlastn√≠ implementace
    from custom_editing_visualizer import custom_draw_geometries_with_editing
    
    # Nahrazen√≠ p≈Øvodn√≠ho k√≥du vlastn√≠ implementac√≠:
    # edited_geometry = o3d.visualization.draw_geometries_with_editing([mesh])
    edited_geometry = custom_draw_geometries_with_editing([mesh])
    
    if edited_geometry:
        edited_mesh = edited_geometry[0]
        print(f"‚úì Editace dokonƒçena: {len(edited_mesh.vertices)} vertices")
        
        # Ulo≈æ√≠me editovan√Ω mesh
        o3d.io.write_triangle_mesh("polygon_edited_mesh.ply", edited_mesh)
        print("‚úì Editovan√Ω mesh ulo≈æen jako 'polygon_edited_mesh.ply'")
        
        # Zobraz√≠me v√Ωsledek
        print("\nüìä POROVN√ÅN√ç:")
        print(f"   P≈Øvodn√≠: {len(mesh.vertices)} vertices, {len(mesh.triangles)} triangles")
        print(f"   Editovan√Ω: {len(edited_mesh.vertices)} vertices, {len(edited_mesh.triangles)} triangles")
        
        # Nab√≠dneme zobrazen√≠ v√Ωsledku
        response = input("\nChcete zobrazit editovan√Ω mesh? (y/n): ")
        if response.lower() == 'y':
            o3d.visualization.draw_geometries([edited_mesh], 
                                            window_name="Editovan√Ω mesh",
                                            width=800, height=600)
    else:
        print("‚úó Editace byla zru≈°ena nebo neprobƒõhla")


def demo_manual_polygon_crop():
    """
    Demonstrace manu√°ln√≠ho polygon crop workflow
    """
    
    # Naƒçten√≠ meshe
    mesh_path = "frames/marching_mesh.ply"
    try:
        mesh = o3d.io.read_triangle_mesh(mesh_path)
        print(f"‚úì Mesh naƒçten: {len(mesh.vertices)} vertices, {len(mesh.triangles)} triangles")
    except Exception as e:
        print(f"‚úó Chyba p≈ôi naƒç√≠t√°n√≠ meshe: {e}")
        return
    
    if not mesh.has_vertex_normals():
        mesh.compute_vertex_normals()
    
    print("\n" + "="*60)
    print("   MANUAL POLYGON CROP WORKFLOW")
    print("="*60)
    print("Tento workflow v√°m uk√°≈æe jak manu√°lnƒõ")
    print("implementovat polygon crop:")
    print()
    print("1. Konverze mesh na point cloud")
    print("2. Polygon selection na point cloud")
    print("3. Rekonstrukce mesh z vybran√Ωch bod≈Ø")
    print("="*60)
    
    input("Stisknƒõte Enter pro pokraƒçov√°n√≠...")
    
    # Krok 1: Konverze na point cloud
    print("üìç Krok 1: Konverze mesh na point cloud...")
    pcd = o3d.geometry.PointCloud()
    pcd.points = mesh.vertices
    pcd.normals = mesh.vertex_normals
    
    # P≈ôid√°me barvy pro lep≈°√≠ vizualizaci
    colors = np.asarray(mesh.vertex_normals)
    colors = (colors + 1.0) / 2.0  # Normalizace do [0,1]
    pcd.colors = o3d.utility.Vector3dVector(colors)
    
    print(f"‚úì Point cloud vytvo≈ôen: {len(pcd.points)} points")
    
    # Krok 2: Polygon selection
    print("\nüìç Krok 2: Polygon selection na point cloud...")
    print("INSTRUKCE pro polygon selection:")
    print("- Shift + drag: kreslen√≠ polygonu")
    print("- Enter: potvrzen√≠ v√Ωbƒõru")
    print("- Del: smaz√°n√≠ vybran√Ωch bod≈Ø")
    print("- C: crop (ponech√°n√≠ pouze vybran√Ωch bod≈Ø)")
    
    # Spust√≠me editing na point cloud
    edited_pcd_list = o3d.visualization.draw_geometries_with_editing([pcd])
    
    if edited_pcd_list and len(edited_pcd_list) > 0:
        edited_pcd = edited_pcd_list[0]
        print(f"‚úì Point cloud editov√°n: {len(edited_pcd.points)} points")
        
        # Krok 3: Rekonstrukce mesh
        print("\nüìç Krok 3: Rekonstrukce mesh...")
        
        if len(edited_pcd.points) > 100:  # Dostatek bod≈Ø pro rekonstrukci
            # Poisson surface reconstruction
            print("  Prov√°d√≠m Poisson surface reconstruction...")
            mesh_recon, _ = o3d.geometry.TriangleMesh.create_from_point_cloud_poisson(
                edited_pcd, depth=8, width=0, scale=1.1, linear_fit=False)
            
            # Vyƒçist√≠me mesh
            mesh_recon.remove_degenerate_triangles()
            mesh_recon.remove_duplicated_triangles()
            mesh_recon.remove_duplicated_vertices()
            mesh_recon.remove_non_manifold_edges()
            
            print(f"‚úì Mesh rekonstruov√°n: {len(mesh_recon.vertices)} vertices, {len(mesh_recon.triangles)} triangles")
            
            # Ulo≈æ√≠me
            o3d.io.write_triangle_mesh("manual_polygon_crop.ply", mesh_recon)
            print("‚úì Rekonstruovan√Ω mesh ulo≈æen jako 'manual_polygon_crop.ply'")
            
            # Zobraz√≠me porovn√°n√≠
            print("\nüìä V√ùSLEDEK MANUAL POLYGON CROP:")
            print(f"   P≈Øvodn√≠ mesh: {len(mesh.vertices)} vertices")
            print(f"   Po selection: {len(edited_pcd.points)} points")
            print(f"   Rekonstruovan√Ω: {len(mesh_recon.vertices)} vertices")
            
            # Nab√≠dneme zobrazen√≠
            response = input("\nChcete zobrazit rekonstruovan√Ω mesh? (y/n): ")
            if response.lower() == 'y':
                # Porovn√°n√≠ side-by-side
                mesh_recon.paint_uniform_color([0.8, 0.2, 0.2])  # ƒåerven√Ω
                mesh.paint_uniform_color([0.2, 0.8, 0.2])       # Zelen√Ω
                
                print("üé® Zobrazujem porovn√°n√≠:")
                print("   Zelen√Ω = p≈Øvodn√≠ mesh")
                print("   ƒåerven√Ω = rekonstruovan√Ω mesh")
                
                o3d.visualization.draw_geometries([mesh, mesh_recon],
                                                window_name="Porovn√°n√≠ mesh≈Ø",
                                                width=1200, height=800)
        else:
            print("‚úó P≈ô√≠li≈° m√°lo bod≈Ø pro rekonstrukci mesh")
    else:
        print("‚úó Selection byla zru≈°ena")


def main():
    """Hlavn√≠ menu"""
    while True:
        print("\n" + "="*50)
        print("   POLYGON SELECTION MENU")
        print("="*50)
        print("1. Real polygon selection (draw_geometries_with_editing)")
        print("2. Manual polygon crop workflow")
        print("3. Ukonƒçit")
        print("="*50)
        
        choice = input("Vyberte mo≈ænost (1-3): ").strip()
        
        if choice == '1':
            demo_real_polygon_selection()
        elif choice == '2':
            demo_manual_polygon_crop()
        elif choice == '3':
            print("üëã Ukonƒçuji...")
            break
        else:
            print("‚úó Neplatn√° volba, zkuste znovu")


if __name__ == '__main__':
    main()
